const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Supabase client olu≈ütur (parent directory'deki .env dosyasƒ±ndan oku)
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

console.log('Debug - ENV values:');
console.log('VITE_SUPABASE_URL:', process.env.VITE_SUPABASE_URL);
console.log('VITE_SUPABASE_ANON_KEY:', process.env.VITE_SUPABASE_ANON_KEY ? 'exists' : 'missing');

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Supabase bilgileri bulunamadƒ±!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Kategori e≈üle≈ümeleri
const categoryMappings = {
  'konut tipi fanlar': 'Konut Tipi Fanlar',
  'santrif√ºj fanlar': 'Santrif√ºj Fanlar',
  'kanal tipi fanlar': 'Kanal Tipi Fanlar',
  '√ßatƒ± tipi fanlar': '√áatƒ± Tipi Fanlar',
  'end√ºstriyel fanlar': 'End√ºstriyel Fanlar',
  'nicotra gebhardt fanlar': 'Nicotra Gebhardt Fanlar',
  'plug fanlar': 'Plug Fanlar',
  'sessiz kanal tipi fanlar': 'Sessiz Kanal Tipi Fanlar',
  'otopark jet fanlarƒ±': 'Otopark Jet Fanlarƒ±',
  'duvar tipi kompakt aksiyal fanlar': 'Duvar Tipi Kompakt Aksiyal Fanlar',
  'duman egzoz fanlarƒ±': 'Duman Egzoz Fanlarƒ±',
  'basƒ±n√ßlandƒ±rma fanlarƒ±': 'Basƒ±n√ßlandƒ±rma Fanlarƒ±',
  'sƒ±ƒüƒ±nak havalandƒ±rma fanlarƒ±': 'Sƒ±ƒüƒ±nak Havalandƒ±rma Fanlarƒ±',
  'ex-proof fanlar (patlama kar≈üƒ± atex fanlar)': 'Ex-Proof Fanlar (Patlama Kar≈üƒ± ATEX Fanlar)',
  'aksesuar': 'Gemici Anemostadƒ±',
  'aksesuarlar': 'Gemici Anemostadƒ±',
  'flexible hava kanallarƒ±': 'Flexible Hava Kanallarƒ±',
  'hava perdeleri': 'Ortam Havalƒ±',
  'nem alma cihazlarƒ±': 'Nem Alma Cihazlarƒ±',
  'ƒ±sƒ± geri kazanƒ±m cihazlarƒ±': 'Ticari Tip',
  'hƒ±z kontrol√º cihazlarƒ±': 'Hƒ±z Anahtarƒ±'
};

async function fixCategoryMapping() {
  console.log('üöÄ Kategori e≈üle≈ütirme d√ºzeltmesi ba≈ülatƒ±lƒ±yor...\n');
  
  // 1. Scraped products y√ºkle
  const productsFile = path.join(__dirname, 'scraped-data', 'fixed_products_2025-09-29T10-49-48-208Z.json');
  const scrapedProducts = JSON.parse(fs.readFileSync(productsFile, 'utf-8'));
  console.log(`üì¶ ${scrapedProducts.length} √ºr√ºn y√ºklendi\n`);
  
  // 2. Kategorileri getir
  const { data: categories, error: catError } = await supabase
    .from('categories')
    .select('*');
  
  if (catError) {
    console.error('‚ùå Kategori y√ºkleme hatasƒ±:', catError);
    return;
  }
  
  // Kategori isminden ID'ye mapping olu≈ütur
  const categoryMap = {};
  categories.forEach(cat => {
    categoryMap[cat.name.toLowerCase().trim()] = cat.id;
  });
  
  console.log(`üìÇ ${categories.length} kategori y√ºklendi\n`);
  
  // 3. Her √ºr√ºn i√ßin kategori e≈üle≈ütirmesi yap
  let stats = {
    total: 0,
    updated: 0,
    notFound: 0,
    skipped: 0
  };
  
  for (const product of scrapedProducts) {
    stats.total++;
    
    const productName = product.name;
    const avensCategory = product.category;
    
    if (!avensCategory) {
      console.log(`‚ö†Ô∏è  Kategori bilgisi yok: ${productName}`);
      stats.notFound++;
      continue;
    }
    
    // Kategoriyi normalize et
    const normalizedCategory = categoryMappings[avensCategory.toLowerCase().trim()] || avensCategory;
    const categoryId = categoryMap[normalizedCategory.toLowerCase().trim()];
    
    if (!categoryId) {
      console.log(`‚ö†Ô∏è  Kategori bulunamadƒ±: "${avensCategory}" ‚Üí "${normalizedCategory}" (√úr√ºn: ${productName})`);
      stats.notFound++;
      continue;
    }
    
    // Veritabanƒ±nda √ºr√ºn√º bul
    const { data: dbProducts, error: findError } = await supabase
      .from('products')
      .select('id, name, category_id')
      .ilike('name', `%${productName}%`)
      .limit(1);
    
    if (findError || !dbProducts || dbProducts.length === 0) {
      console.log(`‚ö†Ô∏è  √úr√ºn DB'de bulunamadƒ±: ${productName}`);
      stats.notFound++;
      continue;
    }
    
    const dbProduct = dbProducts[0];
    
    // Kategori farklƒ±ysa g√ºncelle
    if (dbProduct.category_id !== categoryId) {
      const { error: updateError } = await supabase
        .from('products')
        .update({ category_id: categoryId })
        .eq('id', dbProduct.id);
      
      if (updateError) {
        console.error(`‚ùå G√ºncelleme hatasƒ± - ${productName}:`, updateError.message);
      } else {
        console.log(`‚úì G√ºncellendi: ${productName} ‚Üí ${normalizedCategory}`);
        stats.updated++;
      }
    } else {
      stats.skipped++;
    }
  }
  
  // √ñzet
  console.log('\n' + '='.repeat(60));
  console.log('üìä KATEGORI E≈ûLE≈ûTƒ∞RME D√úZELTMESƒ∞ TAMAMLANDI');
  console.log('='.repeat(60));
  console.log(`Toplam √úr√ºn: ${stats.total}`);
  console.log(`‚úì G√ºncellenen: ${stats.updated}`);
  console.log(`‚Üí Zaten doƒüru: ${stats.skipped}`);
  console.log(`‚ö†Ô∏è  Bulunamayan: ${stats.notFound}`);
  console.log('='.repeat(60));
}

// Script'i √ßalƒ±≈ütƒ±r
fixCategoryMapping()
  .then(() => {
    console.log('\n‚úÖ ƒ∞≈ülem tamamlandƒ±!');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå Fatal error:', error);
    process.exit(1);
  });
name: Supabase Migrate

on:
  push:
    branches: [ master ]
    paths:
      - 'supabase/migrations/**.sql'
  workflow_dispatch:

concurrency:
  group: supabase-migrate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fail if required secrets are missing
        if: ${{ env.SUPABASE_ACCESS_TOKEN == '' || env.SUPABASE_PROJECT_REF == '' }}
        run: |
          echo "::error::Missing secrets. Please set SUPABASE_ACCESS_TOKEN and SUPABASE_PROJECT_REF in repository secrets."
          exit 1

      - name: Setup Supabase CLI (pinned)
        uses: supabase/setup-cli@v1
        with:
          version: v2.39.2

      - name: Show CLI version and project ref
        run: |
          supabase --version
          echo "Project ref: $SUPABASE_PROJECT_REF"
          echo "Migrations in repo:" && ls -la supabase/migrations || true

      - name: Diagnose Supabase project visibility
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -e
          echo "Listing projects via API to verify visibility..."
          RESP=$(curl -s -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" https://api.supabase.com/v1/projects || true)
          echo "$RESP" > projects.json
          echo "Projects JSON fetched (length): $(wc -c < projects.json || echo 0)"
          echo "Does the ref appear? ($SUPABASE_PROJECT_REF)"
          if echo "$RESP" | grep -q '"ref":"'$SUPABASE_PROJECT_REF'"'; then
            echo "OK: Project ref $SUPABASE_PROJECT_REF is visible to this token."
          else
            echo "::warning::Project ref $SUPABASE_PROJECT_REF not found in token's project list. Check token account/org."
          fi

      - name: Link project (debug)
        run: |
          set -e
          supabase link --project-ref "$SUPABASE_PROJECT_REF" --debug

      - name: Apply migrations via Supabase CLI (debug)
        run: |
          set -e
          supabase db push --debug
          echo "Migrations applied successfully via Supabase CLI."

      - name: Install PostgreSQL client (fallback)
        if: ${{ failure() && env.SUPABASE_DB_URL != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Apply migrations via psql (fallback)
        if: ${{ failure() && env.SUPABASE_DB_URL != '' }}
        run: |
          set -e
          for f in supabase/migrations/*.sql; do
            echo "Applying $f"
            psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1 -f "$f"
          done
          echo "Migrations applied via psql fallback."

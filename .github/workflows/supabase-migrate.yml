name: Supabase Migrate

on:
  push:
    branches: [ master ]
    paths:
      - 'supabase/migrations/**.sql'
  workflow_dispatch:

concurrency:
  group: supabase-migrate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decide execution path (prefer Supabase CLI)
        run: |
          if [ -n "${SUPABASE_ACCESS_TOKEN}" ] && [ -n "${SUPABASE_PROJECT_REF}" ]; then
            echo "Will use Supabase CLI API with ACCESS_TOKEN + PROJECT_REF."
            exit 0
          fi
          if [ -n "${SUPABASE_DB_URL}" ]; then
            echo "CLI secrets missing â€” fallback to psql with SUPABASE_DB_URL (sslmode=require)."
            exit 0
          fi
          echo "::error::Missing configuration. Set SUPABASE_ACCESS_TOKEN + SUPABASE_PROJECT_REF (preferred), or SUPABASE_DB_URL as fallback."
          exit 1

      - name: Install PostgreSQL client (fallback)
        if: ${{ env.SUPABASE_ACCESS_TOKEN == '' && env.SUPABASE_PROJECT_REF == '' && env.SUPABASE_DB_URL != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Show target and list migrations
        run: |
          echo "Migrations in repo:" && ls -1 supabase/migrations || true
          # Host mask (do not print full URL)
          echo "Target host: $(echo "$SUPABASE_DB_URL" | sed -E 's|.*@([^:/]+).*|\1|')"

      - name: Normalize DB URL (enforce sslmode=require) [fallback]
        if: ${{ env.SUPABASE_ACCESS_TOKEN == '' && env.SUPABASE_PROJECT_REF == '' && env.SUPABASE_DB_URL != '' }}
        run: |
          if echo "$SUPABASE_DB_URL" | grep -q "sslmode="; then
            DB_URL="$SUPABASE_DB_URL"
          else
            if echo "$SUPABASE_DB_URL" | grep -q "?"; then
              DB_URL="${SUPABASE_DB_URL}&sslmode=require"
            else
              DB_URL="${SUPABASE_DB_URL}?sslmode=require"
            fi
          fi
          echo "DB_URL=$DB_URL" >> $GITHUB_ENV

      - name: Test DB connection [fallback]
        if: ${{ env.SUPABASE_ACCESS_TOKEN == '' && env.SUPABASE_PROJECT_REF == '' && env.SUPABASE_DB_URL != '' }}
        run: |
          psql "$DB_URL" -c "select 1;"

      - name: Apply migrations via psql [fallback]
        if: ${{ env.SUPABASE_ACCESS_TOKEN == '' && env.SUPABASE_PROJECT_REF == '' && env.SUPABASE_DB_URL != '' }}
        run: |
          set -e
          shopt -s nullglob
          files=(supabase/migrations/*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No migrations to apply."
            exit 0
          fi
          for f in $(ls -1 supabase/migrations/*.sql | sort); do
            echo "Applying $f"
            psql "$DB_URL" -v ON_ERROR_STOP=1 -f "$f"
          done
          echo "Migrations applied successfully via psql."

      - name: Setup Supabase CLI
        if: ${{ env.SUPABASE_ACCESS_TOKEN != '' && env.SUPABASE_PROJECT_REF != '' }}
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Show Supabase CLI version
        if: ${{ env.SUPABASE_ACCESS_TOKEN != '' && env.SUPABASE_PROJECT_REF != '' }}
        run: supabase --version

      - name: Login & link project
        if: ${{ env.SUPABASE_ACCESS_TOKEN != '' && env.SUPABASE_PROJECT_REF != '' }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ env.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ env.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          # Login with access token (environment variable)
          export SUPABASE_ACCESS_TOKEN="$SUPABASE_ACCESS_TOKEN"
          supabase login
          # Link project 
          supabase link --project-ref "$SUPABASE_PROJECT_REF"

      - name: Apply migrations via Supabase CLI (linked)
        if: ${{ env.SUPABASE_ACCESS_TOKEN != '' && env.SUPABASE_PROJECT_REF != '' }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(supabase/migrations/*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No migrations to apply."
            exit 0
          fi
          for f in $(ls -1 supabase/migrations/*.sql | sort); do
            echo "Executing $f via Supabase CLI (linked)"
            supabase db execute --file "$f"
          done
          echo "Migrations applied successfully via Supabase CLI."

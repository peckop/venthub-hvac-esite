name: DB Advisor

on:
  push:
  pull_request:

jobs:
  advisor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Postgres client (psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
        continue-on-error: true

      - name: Supabase Advisor (SQL checks)
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          set -Eeuo pipefail
          if [ -z "${SUPABASE_DB_URL:-}" ]; then
            echo "::notice title=Supabase Advisor::Secret SUPABASE_DB_URL not set. Skipping SQL checks."
            exit 0
          fi
          export PGSSLMODE=require

          echo "::group::[Advisor] Unindexed foreign keys"
          psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1 -P pager=off -c "\
          WITH fks AS (\
            SELECT n.nspname AS schema_name, c.relname AS table_name, con.conname AS fk_name, con.conkey, con.conrelid\
            FROM pg_constraint con\
            JOIN pg_class c ON c.oid = con.conrelid\
            JOIN pg_namespace n ON n.oid = c.relnamespace\
            WHERE con.contype = 'f'\
          )\
          SELECT schema_name, table_name, fk_name\
          FROM fks f\
          WHERE NOT EXISTS (\
            SELECT 1 FROM pg_index i\
            WHERE i.indrelid = f.conrelid\
              AND (i.indkey::int[] @> f.conkey OR i.indkey::int[] = f.conkey)\
          )\
          ORDER BY 1,2;" || true
          echo "::endgroup::"

          echo "::group::[Advisor] Duplicate indexes"
          psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1 -P pager=off -c "\
          WITH idx AS (\
            SELECT n.nspname AS schema_name, c.relname AS table_name, i.relname AS index_name,\
                   regexp_replace(pg_get_indexdef(i.oid), '\\s+', ' ', 'g') AS indexdef_norm\
            FROM pg_class c\
            JOIN pg_index ix ON ix.indrelid = c.oid\
            JOIN pg_class i ON i.oid = ix.indexrelid\
            JOIN pg_namespace n ON n.oid = c.relnamespace\
            WHERE n.nspname NOT IN ('pg_catalog','information_schema')\
          )\
          SELECT schema_name, table_name, string_agg(index_name, ', ') AS duplicates, indexdef_norm\
          FROM idx\
          GROUP BY schema_name, table_name, indexdef_norm\
          HAVING COUNT(*) > 1\
          ORDER BY 1,2;" || true
          echo "::endgroup::"

          echo "::group::[Advisor] Unused indexes (idx_scan=0)"
          psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1 -P pager=off -c "\
          SELECT schemaname, relname AS table_name, indexrelname AS index_name, idx_scan\
          FROM pg_stat_user_indexes\
          WHERE idx_scan = 0\
          ORDER BY 1,2;" || true
          echo "::endgroup::"

          echo "::group::[Advisor] Multiple permissive RLS policies"
          psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1 -P pager=off -c "\
          SELECT schemaname, tablename, cmd, COUNT(*) AS policy_count, string_agg(policyname, ', ') AS policies\
          FROM pg_policies\
          WHERE permissive = 'PERMISSIVE'\
          GROUP BY schemaname, tablename, cmd\
          HAVING COUNT(*) > 1\
          ORDER BY 1,2,3;" || true
          echo "::endgroup::"
        continue-on-error: true
